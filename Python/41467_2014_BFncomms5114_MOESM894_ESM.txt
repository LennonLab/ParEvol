Supplementary Software 1 Detailed instructions about how to use the provided scripts

All the Python scripts necessary to create sets of null matrices with fixed row and column totals should be put in the same folder and renamed as follows:

1)'Supplementary Software 2.txt' --> 'curveball_main.py';
2)'Supplementary Software 3.txt' --> 'curveball.py';
3)'Supplementary Software 4.txt' --> 'scanutils.py';

To execute the scripts you must have Python (version 2.7 or higher) and the library Numpy installed. To create a set of null matrices you must type in terminal the following command (matrix.txt is the name of the file including the matrix to be randomized):

	python curveball_main.py -m matrix.txt


This will create a set of 100 null matrices in a folder named (by default) 'null_matrices'. You may set the name of the output folder and the number of null matrices to be generated by using the parameters '-o' and '-n'. Thus, to generate 1000 randomizations of the matrix included in the file 'matrix.txt' located in the 'matrix_files' folder, and save these matrices to a folder named 'outfolder', you must type in terminal the command:

	python curveball_main.py -m ./matrix_files/matrix.txt -o ./outfolder -n 1000


In addition you may also set the number of pair extractions to be performed to create each null matrix, using the parameter '-i' (the default value is set to 5 times the smaller dimension of the matrix):

	python curveball_main.py -m ./matrix_files/matrix.txt -o ./outfolder -n 1000 -i 500


The input file should contain only a binary matrix (either including or not row and column names). The script can handle several different file formats, and returns a set of matrices with the same format of the original one. Different separators (comma, tabulation, single space, vertical slash) are allowed.
The two main functions necessary to create a single null matrix are included in the file 'curveball.py'. These functions can be called from within Python. In particular, the function named 'find_presences' converts an input binary matrix (in form of a Numpy array) to a list object that should be then passed (as the parameter 'r_hp') to the function 'curveball', together with the array including the matrix.


Thus, assuming that the Numpy array including your matrix is called M, you should type the following commands to obtain a random matrix with the same column and row totals of M, and store it in a Numpy array called RM:


	from curveball import*
	r_hp=find_presences(M)
	RM=curve_ball(M,r_hp)
	print RM




